<program> ::= "inicio" "\n" <decl_list> <stmt_list> "fim"

<decl_list> ::= ( <var_decl> "\n" | <func_decl> "\n" )*

<var_decl> ::= <type> " " <id> ( "[" <number> "]" )? ";"

<type> ::= "int" | "float" | "string" | "bool"

<func_decl> ::= "func" " " <id> " " "(" <param_list>? ")" " " "{" "\n" <decl_list> <stmt_list> "}" 

<param_list> ::= <param> ( "," " " <param> )*

<param> ::= <type> " " <id> ( "[" "]" )?

<stmt_list> ::= ( <stmt> "\n" )*

<stmt> ::= <assign_stmt>
         | <print_stmt>
         | <if_stmt>
         | <while_stmt>
         | <call_stmt>
         | <return_stmt>

<assign_stmt> ::= <id> ( "[" <expr> "]" )? " " "=" " " <expr> ";"

<print_stmt> ::= "print" " " "(" <expr> ")" ";"

<if_stmt> ::= "if" " " "(" <cond> ")" " " "{" "\n" <stmt_list> "}" <else_part>?

<else_part> ::= "else" " " "{" "\n" <stmt_list> "}"

<while_stmt> ::= "while" " " "(" <cond> ")" " " "{" "\n" <stmt_list> "}"

<call_stmt> ::= <id> "(" <arg_list>? ")" ";"

<arg_list> ::= <expr> ( "," " " <expr> )*

<return_stmt> ::= "return" ( " " <expr> )? ";"

<cond> ::= <expr> " " <relop> " " <expr>

<relop> ::= "==" | "!=" | "<" | "<=" | ">" | ">="

<expr> ::= <term> ( ( " " "+" " " | " " "-" " " ) <term> )*

<term> ::= <factor> ( ( " " "" " " | " " "/" " " ) <factor> )

<factor> ::= <number>
           | <string>
           | <bool>
           | <id> ( "[" <expr> "]" )?
           | "(" <expr> ")"
           | <call_expr>

<call_expr> ::= <id> "(" <arg_list>? ")"

<id> ::= [a-z]+

<number> ::= [0-9]+ ( "." [0-9]+ )?

<string> ::= """ ( [a-z] | [A-Z] | [0-9] | " " )* """

<bool> ::= "true" | "false"